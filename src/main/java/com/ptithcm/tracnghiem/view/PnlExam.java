/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.ptithcm.tracnghiem.view;

import com.ptithcm.tracnghiem.entity.MonHoc;
import com.ptithcm.tracnghiem.entity.SinhVien;
import com.ptithcm.tracnghiem.exception.ErrorException;
import com.ptithcm.tracnghiem.global_variable.LoginVariables;
import com.ptithcm.tracnghiem.model.dto.BoDeDto;
import com.ptithcm.tracnghiem.model.dto.KetQuaThi;
import com.ptithcm.tracnghiem.service.MyThread;
import com.ptithcm.tracnghiem.service.ThiService;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JViewport;
import javax.swing.SwingConstants;

/**
 *
 * @author MINHDAT
 */
public class PnlExam extends javax.swing.JPanel {
    private MyThread clockThread;

    private FrmMain frmMain;
    private PnlExamManageBar pnlExamManageBar;
    private PnlExamQuestionNavigation pnlExamQuestionNavigation;
    private PnlExamContentSection pnlExamContentSection;

    /**
     * Creates new form PnlExam
     */
    public PnlExam(FrmMain frmMain) {
        initComponents();
        initMyComponents();
        addEvents();
        this.frmMain = frmMain;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlExamManageBarContainer = new javax.swing.JPanel();
        pnlQuestionNavContainer = new javax.swing.JPanel();
        scrollContentExam = new javax.swing.JScrollPane();
        pnlContentExamContainer = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        pnlExamManageBarContainer.setLayout(new java.awt.CardLayout());
        add(pnlExamManageBarContainer, java.awt.BorderLayout.NORTH);

        pnlQuestionNavContainer.setLayout(new java.awt.CardLayout());
        add(pnlQuestionNavContainer, java.awt.BorderLayout.WEST);

        pnlContentExamContainer.setBackground(new java.awt.Color(255, 255, 255));
        pnlContentExamContainer.setLayout(new java.awt.CardLayout(16, 16));
        scrollContentExam.setViewportView(pnlContentExamContainer);

        add(scrollContentExam, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

//    Methods
    public void addEvents() {
        pnlExamManageBar.getBtnStart().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                try {
//                    Thêm các vùng chứa thông tin cần thiết của bài thi
                    pnlQuestionNavContainer.add(pnlExamQuestionNavigation = new PnlExamQuestionNavigation());
                    pnlExamQuestionNavigation.getTblQuestionNav().addMouseListener(new MouseAdapter() {
                        @Override
                        public void mouseClicked(MouseEvent e) {
                            int selectedRowIndex = pnlExamQuestionNavigation.getTblQuestionNav().getSelectedRow();

                            PnlQuestion selectedPnlQuestion = (PnlQuestion) pnlExamContentSection.getComponent(selectedRowIndex);
                            Rectangle bounds = selectedPnlQuestion.getBounds();
                            JViewport viewport = scrollContentExam.getViewport();
                            viewport.setViewPosition(new Point(0, bounds.y));
                        }
                    });
                    pnlContentExamContainer.add(pnlExamContentSection = new PnlExamContentSection(pnlExamQuestionNavigation.getTblQuestionNav()));

//                    Đổ dữ liệu vào các vùng chứa
                    List<BoDeDto> baiThi = ThiService.getBaiThi(((MonHoc) pnlExamManageBar.getCboSubject().getSelectedItem()).getMaMH(),
                            pnlExamManageBar.getTxtLevel().getText(), Short.parseShort(pnlExamManageBar.getTxtQuestionQuantity().getText()));
                    if (!baiThi.isEmpty()) {
                        pnlExamQuestionNavigation.fillDataTable(baiThi);
                        pnlExamContentSection.fillQuestions(baiThi);

//                        Thêm sự kiện với nút nộp bài
                        pnlExamContentSection.getBtnNopBai().addMouseListener(new MouseAdapter() {
                            @Override
                            public void mouseClicked(MouseEvent e) {
                                clockThread.setStop(true);
                                nopBai(frmMain.getTabbedPaneWorkspace());
                            }
                        });

//                        Ẩn các nút tùy chọn trên thanh chọn
                        pnlExamManageBar.disableAll();

//                        Ẩn nút bắt đầu và hiển thị đồng hồ đếm ngược
                        pnlExamManageBar.getBtnStart().setVisible(false);
                        JLabel lblClock = new JLabel();
                        lblClock.setPreferredSize(new Dimension(110, 60));
                        lblClock.setIcon(new ImageIcon(getClass().getResource("/icons/32x32/clock.png").getPath()));
                        lblClock.setHorizontalAlignment(SwingConstants.CENTER);
                        pnlExamManageBar.getPnlEastContainer().add(lblClock);

//                        Tạo luồng đếm ngược
                        clockThread = new MyThread() {
                            @Override
                            public void run() {
                                int seconds = Short.parseShort(pnlExamManageBar.getTxtDuration().getText()) * 60;
                                SimpleDateFormat simpleDateFormat = new SimpleDateFormat("HH:mm");
                                while (seconds >= 0 && !isStop()) {
                                    LocalTime time = LocalTime.ofSecondOfDay(seconds);
                                    String formattedTime = time.format(DateTimeFormatter.ofPattern("HH:mm:ss"));
                                    lblClock.setText(formattedTime);
                                    try {
                                        sleep(1000);
                                    } catch (InterruptedException ex) {
                                        MessageBox.showErrorBox(ex.getClass().getName(), ex.getMessage());
                                    }
                                    --seconds;
                                }
                                if (!isStop()) {
                                    nopBai(frmMain.getTabbedPaneWorkspace());
                                }
                            }
                        };
                        clockThread.start();

                    } else {
//                        Thu hồi vùng nhớ trước đó
                        pnlContentExamContainer.removeAll();
                        pnlQuestionNavContainer.removeAll();
                        revalidate();
                        repaint();
                        
//                        Ném ra lỗi vì thiếu câu thi
                        throw new ErrorException("Tạo bài thi thất bại! Vì số câu thi trong bộ đề không đủ với yêu cầu của đề thi");
                    }
                } catch (SQLException ex) {
                    MessageBox.showErrorBox(ex.getClass().getName(), ex.getMessage());
                } catch (ErrorException ex) {
                    MessageBox.showErrorBox(ex.getClass().getName(), ex.getMessage());
                }
            }
        });
    }

//    Tạo các component cần thiết
    public void initMyComponents() {
        pnlExamManageBarContainer.add(pnlExamManageBar = new PnlExamManageBar());
    }

//    Nộp bài
    public void nopBai(CustomTabbedPane tabbedPaneWorkspace) {
        KetQuaThi result = null;
        try {
            switch (LoginVariables.databaseConnector.getAccount().getGroupName()) {
                case "GIANGVIEN": {
                    result = ThiService.getExamResult(
                            Short.parseShort(pnlExamManageBar.getTxtQuestionQuantity().getText()),
                            pnlExamQuestionNavigation.getDsLuaChon()
                    );
                    break;
                }
                case "SINHVIEN": {
                    result = ThiService.saveExamResult(
                            LoginVariables.databaseConnector.getAccount().getUsername(),
                            ((MonHoc) pnlExamManageBar.getCboSubject().getSelectedItem()).getMaMH(),
                            Short.parseShort(String.valueOf(pnlExamManageBar.getCboTimes().getSelectedItem())),
                            new SimpleDateFormat("dd/MM/yyyy HH:mm").parse(String.valueOf(pnlExamManageBar.getCboDateTime().getSelectedItem())),
                            Short.parseShort(pnlExamManageBar.getTxtQuestionQuantity().getText()), pnlExamQuestionNavigation.getDsLuaChon()
                    );
                    break;
                }
            }

//                                    Hiển thị hộp thoại thông báo kết quả thi
            if (result != null) {
                ResultConfirmBox resultConfirmBox = new ResultConfirmBox(frmMain, true);
                resultConfirmBox.setLocationRelativeTo(null);
                SinhVien sinhVien = (SinhVien) pnlExamManageBar.getCboFullName().getSelectedItem();
                resultConfirmBox.getTxtStudentCode().setText(sinhVien.getMaSV());
                resultConfirmBox.getTxtFullName().setText(sinhVien.getHo() + " " + sinhVien.getTen());
                resultConfirmBox.getTxtClass().setText(String.valueOf(pnlExamManageBar.getCboClassroomCode().getSelectedItem()) + " - " + pnlExamManageBar.getTxtClassName().getText());
                resultConfirmBox.getTxtMonHoc().setText(String.valueOf(pnlExamManageBar.getCboSubject().getSelectedItem()));
                resultConfirmBox.getTxtExamDate().setText(String.valueOf(pnlExamManageBar.getCboDateTime().getSelectedItem()));
                resultConfirmBox.getTxtTimes().setText(String.valueOf(pnlExamManageBar.getCboTimes().getSelectedItem()));
                resultConfirmBox.getTxtLevel().setText(pnlExamManageBar.getTxtLevel().getText());
                resultConfirmBox.getTxtDuration().setText(pnlExamManageBar.getTxtDuration().getText());
                resultConfirmBox.getLblTiLeDung().setText(result.getSoCauDung() + "/" + result.getSoCauthi());
                resultConfirmBox.getLblMark().setText(String.valueOf(result.getDiem()));
                resultConfirmBox.setVisible(true);
            } else {
                throw new ErrorException("Lỗi không xác định!");
            }
        } catch (SQLException ex) {
            MessageBox.showErrorBox(ex.getClass().getName(), ex.getMessage());
            ex.printStackTrace();
        } catch (ParseException ex) {
            MessageBox.showErrorBox(ex.getClass().getName(), ex.getMessage());
        } catch (ErrorException ex) {
            MessageBox.showErrorBox(ex.getClass().getName(), ex.getMessage());
        }
    }

//    Getters and setters
    public PnlExamManageBar getPnlExamManageBar() {
        return pnlExamManageBar;
    }

    public void setPnlExamManageBar(PnlExamManageBar pnlExamManageBar) {
        this.pnlExamManageBar = pnlExamManageBar;
    }

    public PnlExamQuestionNavigation getPnlExamQuestionNavigation() {
        return pnlExamQuestionNavigation;
    }

    public void setPnlExamQuestionNavigation(PnlExamQuestionNavigation pnlExamQuestionNavigation) {
        this.pnlExamQuestionNavigation = pnlExamQuestionNavigation;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel pnlContentExamContainer;
    private javax.swing.JPanel pnlExamManageBarContainer;
    private javax.swing.JPanel pnlQuestionNavContainer;
    private javax.swing.JScrollPane scrollContentExam;
    // End of variables declaration//GEN-END:variables
}
