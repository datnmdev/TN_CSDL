/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.ptithcm.tracnghiem.view;

import com.ptithcm.tracnghiem.model.dto.BoDeDto;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author MINHDAT
 */
public class PnlExamContentSection extends javax.swing.JPanel {
    private PnlExamContentSection _this = this;
    private JButton btnNopBai;
    private JTable tblData;

    /**
     * Creates new form PnlExamContentSection
     */
    public PnlExamContentSection(JTable jTable) {
        initComponents();
        this.tblData = jTable;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new java.awt.GridLayout(0, 1, 0, 16));
    }// </editor-fold>//GEN-END:initComponents

//    Methods
    public void fillQuestions(List<BoDeDto> boDeDtos) {
//        Tạo số cột và số hàng tương ứng
        GridLayout gridLayout = (GridLayout) getLayout();
        gridLayout.setRows(boDeDtos.size() + 1);

//        Hiển thị dữ liệu ra màn hình
        for (int i = 0; i < boDeDtos.size(); ++i) {
//            Tạo câu hỏi
            PnlQuestion pnlQuestion = new PnlQuestion(String.valueOf(boDeDtos.get(i).getStt()));
            pnlQuestion.getTxtContent().setText("Câu " + boDeDtos.get(i).getStt() + ": " + boDeDtos.get(i).getNoiDung());
            pnlQuestion.getRdA().setText("A. " + boDeDtos.get(i).getA());
            pnlQuestion.getRdA().addItemListener(new ItemListener() {
                @Override
                public void itemStateChanged(ItemEvent e) {
                    if (e.getStateChange() == ItemEvent.SELECTED) {
                        DefaultTableModel model = (DefaultTableModel) tblData.getModel();
                        int row = Short.parseShort(pnlQuestion.getRdA().getName())-1;
                        model.setValueAt(pnlQuestion.getRdA().getActionCommand(), row, 2);
                        model.fireTableCellUpdated(row, 2);
                    }
                }
            });
            pnlQuestion.getRdB().setText("B. " + boDeDtos.get(i).getB());
            pnlQuestion.getRdB().addItemListener(new ItemListener() {
                @Override
                public void itemStateChanged(ItemEvent e) {
                    if (e.getStateChange() == ItemEvent.SELECTED) {
                        DefaultTableModel model = (DefaultTableModel) tblData.getModel();
                        int row = Short.parseShort(pnlQuestion.getRdB().getName())-1;
                        model.setValueAt(pnlQuestion.getRdB().getActionCommand(), row, 2);
                        model.fireTableCellUpdated(row, 2);
                    }
                }
            });
            pnlQuestion.getRdC().setText("C. " + boDeDtos.get(i).getC());
            pnlQuestion.getRdC().addItemListener(new ItemListener() {
                @Override
                public void itemStateChanged(ItemEvent e) {
                    if (e.getStateChange() == ItemEvent.SELECTED) {
                        DefaultTableModel model = (DefaultTableModel) tblData.getModel();
                        int row = Short.parseShort(pnlQuestion.getRdC().getName())-1;
                        model.setValueAt(pnlQuestion.getRdC().getActionCommand(), row, 2);
                        model.fireTableCellUpdated(row, 2);
                    }
                }
            });
            pnlQuestion.getRdD().setText("D. " + boDeDtos.get(i).getD());
            pnlQuestion.getRdD().addItemListener(new ItemListener() {
                @Override
                public void itemStateChanged(ItemEvent e) {
                    if (e.getStateChange() == ItemEvent.SELECTED) {
                        DefaultTableModel model = (DefaultTableModel) tblData.getModel();
                        int row = Short.parseShort(pnlQuestion.getRdD().getName())-1;
                        model.setValueAt(pnlQuestion.getRdD().getActionCommand(), row, 2);
                        model.fireTableCellUpdated(row, 2);
                    }
                }
            });

//            Thêm vào vùng chứa
            _this.add(pnlQuestion);
        }

//        Thêm nút nộp bài vào cuối bài thi
        JPanel jPanel = new JPanel(new GridBagLayout());
        jPanel.setBackground(new Color(255, 255, 255));
        jPanel.add(btnNopBai = new JButton("NỘP BÀI"));
        btnNopBai.setPreferredSize(new Dimension(200, 50));
        btnNopBai.setBackground(Color.GREEN);
        btnNopBai.setForeground(Color.WHITE);
        _this.add(jPanel);

//        Revalidate and repaint
        revalidate();
        repaint();
    }
    
//    Getters and setters
    public JButton getBtnNopBai() {
        return btnNopBai;
    }

    public void setBtnNopBai(JButton btnNopBai) {
        this.btnNopBai = btnNopBai;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
